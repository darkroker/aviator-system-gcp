name: Deploy Aviator System to GCP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: aviator-trading-system-prod
  REGION: us-central1
  SERVICE_NAME: aviator-system
  REGISTRY: gcr.io

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true
        
    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker gcr.io
        
    - name: Build Docker image
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
        docker tag ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest
        
    - name: Push Docker image to GCR
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest
        
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 2 \
          --timeout 300 \
          --concurrency 100 \
          --max-instances 10 \
          --min-instances 1 \
          --port 8000 \
          --set-env-vars="GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }},FLASK_ENV=production,GUNICORN_WORKERS=4" \
          --labels="app=aviator-system,version=19.3,environment=production"
          
    - name: Get service URL
      id: get-url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "🚀 Service deployed at: $SERVICE_URL"
        
    - name: Health check
      run: |
        echo "Waiting for service to be ready..."
        sleep 30
        
        # Test health endpoint
        if curl -f -s --max-time 30 "${{ steps.get-url.outputs.SERVICE_URL }}/health"; then
          echo "✅ Health check passed"
        else
          echo "❌ Health check failed"
          exit 1
        fi
        
    - name: Deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Service**: ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Project**: ${{ env.PROJECT_ID }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: ${{ steps.get-url.outputs.SERVICE_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Dashboard](${{ steps.get-url.outputs.SERVICE_URL }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Health Check](${{ steps.get-url.outputs.SERVICE_URL }}/health)" >> $GITHUB_STEP_SUMMARY
        echo "- [API Docs](${{ steps.get-url.outputs.SERVICE_URL }}/docs)" >> $GITHUB_STEP_SUMMARY
        
  cleanup:
    name: Cleanup old images
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Clean up old images
      run: |
        # Keep only the 5 most recent images
        gcloud container images list-tags ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }} \
          --limit=999 --sort-by=TIMESTAMP \
          --format="get(digest)" | tail -n +6 | \
        while read digest; do
          if [ ! -z "$digest" ]; then
            echo "Deleting old image: $digest"
            gcloud container images delete ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}@$digest --quiet || true
          fi
        done